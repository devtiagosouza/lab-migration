/******************************************************************************/
/****              Generated by IBExpert 17/05/2025 00:56:38               ****/
/******************************************************************************/

/******************************************************************************/
/****     Following SET SQL DIALECT is just for the Database Comparer      ****/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/****                                Tables                                ****/
/******************************************************************************/


CREATE GENERATOR GEN_ABASTECIMENTO_ID;

CREATE TABLE ABASTECIMENTO (
    ID_AB                       BIGINT,
    DATA                        DATE,
    HORA                        VARCHAR(10),
    BOMBA                       VARCHAR(10),
    BICO                        VARCHAR(10),
    TANQUE                      VARCHAR(10),
    REG_INICIO                  NUMERIC(15,4),
    REG_FINAL                   NUMERIC(15,4),
    CODIGO                      VARCHAR(14),
    LITRO                       NUMERIC(15,4),
    PRECO                       NUMERIC(15,4),
    TOTAL                       NUMERIC(15,4),
    CANAL                       VARCHAR(5),
    UNIDADE                     VARCHAR(4),
    POSICAO                     VARCHAR(10),
    REGISTRO                    VARCHAR(50),
    ENVIADO                     VARCHAR(1),
    STATUS                      VARCHAR(20),
    ID_SAIDA                    BIGINT,
    REGISTRO_ALTERADO           VARCHAR(1) DEFAULT 'N',
    SERIE_ECF                   VARCHAR(20),
    COO                         VARCHAR(6),
    FATURADO                    VARCHAR(1) DEFAULT 'N',
    NOTA_FISCAL                 VARCHAR(10),
    ESTOQUE_INICIAL             NUMERIC(15,5),
    TAG1                        VARCHAR(50),
    TAG2                        VARCHAR(50),
    ID_FRENTISTA                INTEGER DEFAULT 0,
    ID_CLIENTE                  INTEGER DEFAULT 0,
    JUSTIFICATIVA_AFERICAO      VARCHAR(255),
    DESCONTINUIDADE_ENCERRANTE  CHAR(1) DEFAULT 'N',
    DATA_HORA_SERVIDOR          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRECO_LIQUIDO               NUMERIC(15,4),
    SUBTOTAL_LIQUIDO            NUMERIC(15,4),
    VALOR_DESCONTO              NUMERIC(15,2),
    VALOR_ACRESCIMO             NUMERIC(15,2),
    PRECO_ESPECIAL              NUMERIC(15,4),
    BKP_TANQUE                  VARCHAR(10),
    BKP_BOMBA                   VARCHAR(10),
    BKP_BICO                    VARCHAR(10),
    BKP_REGINICIO               NUMERIC(15,4),
    BKP_REGFINAL                NUMERIC(15,4),
    BKP_STATUS                  VARCHAR(20),
    BKP_LITRO                   NUMERIC(15,4),
    ID_NFCE                     BIGINT,
    ID_ITEM_NFCE                BIGINT,
    COD_VIRGULA                 VARCHAR(5),
    BAIXOU_ESTOQUE              CHAR(1),
    RESERVADO_FATURAMENTO       CHAR(1),
    NUMERO_TURNO                INTEGER,
    HASH_TERMINAL               VARCHAR(50),
    VERSAO_INTEGRADOR           VARCHAR(50),
    ST_FULL                     VARCHAR(200)
);



/******************************************************************************/
/****                             Primary keys                             ****/
/******************************************************************************/

ALTER TABLE ABASTECIMENTO ADD CONSTRAINT PK_ABASTECIMENTO PRIMARY KEY (ID_AB);

ALTER TABLE ABASTECIMENTO ADD NOVO_CAMPO VARCHAR(1);


/******************************************************************************/
/****                               Indices                                ****/
/******************************************************************************/

CREATE INDEX ABASTECIMENTO_IDX_BICO ON ABASTECIMENTO (BICO);
CREATE INDEX ABASTECIMENTO_IDX_BOMBA ON ABASTECIMENTO (BOMBA);
CREATE INDEX ABASTECIMENTO_IDX_CANAL ON ABASTECIMENTO (CANAL);
CREATE INDEX ABASTECIMENTO_IDX_HORA ON ABASTECIMENTO (HORA);
CREATE INDEX ABASTECIMENTO_IDX_ID_FRENTISTA ON ABASTECIMENTO (ID_FRENTISTA);
CREATE INDEX ABASTECIMENTO_IDX_ID_ITEM_NFCE ON ABASTECIMENTO (ID_ITEM_NFCE);
CREATE INDEX ABASTECIMENTO_IDX_ID_NFCE ON ABASTECIMENTO (ID_NFCE);
CREATE INDEX ABASTECIMENTO_IDX_REG_FINAL ON ABASTECIMENTO (REG_FINAL);
CREATE INDEX ABASTECIMENTO_IDX_REG_INICIO ON ABASTECIMENTO (REG_INICIO);
CREATE INDEX ABASTECIMENTO_IDX_ST_FULL ON ABASTECIMENTO (ST_FULL);
CREATE INDEX ABASTECIMENTO_IDX_TANQUE ON ABASTECIMENTO (TANQUE);
CREATE INDEX IDX_CODIGO ON ABASTECIMENTO (CODIGO);
CREATE INDEX IDX_DATA ON ABASTECIMENTO (DATA);
CREATE INDEX IDX_LITRO ON ABASTECIMENTO (LITRO);
CREATE INDEX STATUS ON ABASTECIMENTO (STATUS);


/******************************************************************************/
/****                               Triggers                               ****/
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/****                         Triggers for tables                          ****/
/******************************************************************************/



/* Trigger: ABASTECIMENTO_BI */
CREATE OR ALTER TRIGGER ABASTECIMENTO_BI FOR ABASTECIMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
 BEGIN
   IF (NEW.ID_AB IS NULL) THEN
     NEW.ID_AB = GEN_ID(GEN_ABASTECIMENTO_ID,1);
 END
^

/* Trigger: ABASTECIMENTO_ESTOQUE_TANQUES */
CREATE OR ALTER TRIGGER ABASTECIMENTO_ESTOQUE_TANQUES FOR ABASTECIMENTO
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 0
AS
     --Depois
      declare variable est_atual numeric(15,3);
      declare variable id_tanque integer;
    begin
      id_tanque = 0;
      select  t.id_tanque from tanques t where COALESCE(t.tq_ativo,'S') <> 'N'
      AND  t.tq_tanque = new.tanque into :id_tanque;

      select  coalesce(tq_estoque_escritural,0) from tanques t where t.id_tanque = :id_tanque into :est_atual;


      IF (INSERTING) THEN BEGIN  --DEPOIS DE INSERIR

            UPDATE ABASTECIMENTO AB SET AB.estoque_inicial = :est_atual WHERE AB.id_ab = NEW.id_ab;

            update tanques t set t.tq_estoque_escritural = t.tq_estoque_escritural - new.litro where t.id_tanque = :id_tanque;

      END
      ELSE if (UPDATING)  then BEGIN
            IF ((old.status = 'PENDENTE') AND (NEW.status = 'AFERICAO')) then begin  --SE ESTIVER MUDANDO O STATUS DE PENDENTE PARA AFERICAO DEVOLVE O ESTOQUE
               update tanques t set t.tq_estoque_escritural = t.tq_estoque_escritural + old.litro WHERE t.id_tanque = :id_tanque;
            END

            IF (OLD.litro <> NEW.litro) then BEGIN --EST? ATUALIZANDO A QUANTIDADE. ? O CASO DE PROBLEMA DE CASAS DECIMAIS NO CONCENTRADOR QUE ? PRECISO
               --VOLTAR O CORRETO

               --VOLTA O ESTOQUE ANTIGO
                update tanques t set t.tq_estoque_escritural = t.tq_estoque_escritural + old.litro WHERE T.id_tanque = :id_tanque;
                --BAIXA A QUANTIDADE NOVA
                update tanques t set t.tq_estoque_escritural = t.tq_estoque_escritural - new.litro WHERE T.id_tanque = :id_tanque;
            END
      END
      ELSE if (DELETING) then BEGIN  --DEVOLVE O ESTOQUE
          if (old.status <> 'AFERICAO') then
               update tanques t set t.tq_estoque_escritural = t.tq_estoque_escritural + old.litro WHERE  T.id_tanque = :id_tanque;
      END
    END
^
SET TERM ; ^



/******************************************************************************/
/****                              Privileges                              ****/
/******************************************************************************/

